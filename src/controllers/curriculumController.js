const mockSubjectsArrayInstances = require('../mock/mockData');
const { populateDependentsFromPrerequisites, convertToMap } = require('../services/dependencyService');
const scrapeUfrjCurriculum = require('../services/curriculumService').default; // Importa a função fictícia de scraping

// Controller para retornar os dados mockados
exports.getSubjects = (_, res) => {
    try {
        /**
         * A map containing subjects with their respective dependents populated based on prerequisites.
         *
         * This map is generated by first converting an array of subject instances into a map,
         * and then populating each subject with its dependents derived from their prerequisites.
         *
         * @type {Map<string, Object>} A map where the key is the subject identifier (string),
         * and the value is an object representing the subject, including its dependents.
         */
        const mapWithDependents = populateDependentsFromPrerequisites(convertToMap(mockSubjectsArrayInstances));
        res.json(Object.fromEntries(mapWithDependents));
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// Controller para retornar os dados a partir de URL
exports.scrapeCurriculum = async (req, res) => {
    try {
        const { url } = req.query; // Obtém a URL dos parâmetros da query string
        if (!url) {
            return res.status(400).json({ error: 'A URL é obrigatória.' });
        }

        if (url.includes('ufrj.br')) {
            const curriculum = await scrapeUfrjCurriculum(url);
            const subjectsMap = convertToMap(curriculum.subjects);
            const mapWithDependents = populateDependentsFromPrerequisites(subjectsMap);
            res.json(Object.fromEntries(mapWithDependents));
        }
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
}
